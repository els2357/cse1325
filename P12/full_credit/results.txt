====================
HOMEWORK P12 RESULTS
====================

Fall 2022


FULL CREDIT
===========

NOTE: These are measurements which may vary plus your opinions which may vary a LOT. We won't grade for "correctness", just completeness.

QUESTION 1: What Solver command line arguments did you use to achieve a 30 to 45 second runtime? Note: We're only interested in the "real" seconds for this question.

time java Solver --slices 400000000 --min -5000.0 --max 5000.0 poly4.poly

real	0m33.610s



QUESTION 2: Provide the full output (including the time command) for your program, with 1 to 16 threads. **Ensure that the result is the same for all 16 runs.** (The root found may vary in the least significant digits.) With bash, you can run all of these with a single command if you like, adding whatever Solver command line arguments you identified in QUESTION 1: 

for i in {1..16} ; do time java Solver --threads $i --slices 400000000 --min -5000.0 --max 5000.0 poly4.poly ; done


Loading poly4.poly... done

threads = 1: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [-10.999999937367246, -0.9999999372839701, 5.300000062708017, 17.000000063000492]


real	0m33.174s
user	0m32.870s
sys	0m0.445s
Loading poly4.poly... done

threads = 2: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [5.300000499990983, 16.99999950028348, -10.999999937367246, -0.9999999372839701]


real	0m19.477s
user	0m35.328s
sys	0m0.202s
Loading poly4.poly... done

threads = 3: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [-10.999999941801352, -0.999999941718066, 5.300000058273925, 17.000000058566414]


real	0m13.706s
user	0m36.572s
sys	0m1.394s
Loading poly4.poly... done

threads = 4: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [5.300000499990983, 16.99999950028348, -10.999999700453998, -0.9999997003707208]


real	0m11.531s
user	0m38.651s
sys	0m3.369s
Loading poly4.poly... done

threads = 5: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [-10.99999962361234, -0.9999996235290465, 5.300000376462947, 17.000000376755445]


real	0m11.237s
user	0m37.975s
sys	0m1.854s
Loading poly4.poly... done

threads = 6: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [5.300000499990983, 16.99999950028348, -10.999999941801352, -0.999999941718066]


real	0m11.640s
user	0m40.505s
sys	0m1.160s
Loading poly4.poly... done

threads = 7: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [-11.000000487245902, -1.0000004871626185, 5.2999995128293715, 16.999999513121857]


real	0m10.876s
user	0m38.715s
sys	0m1.267s
Loading poly4.poly... done

threads = 8: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [5.300000499990983, 16.99999950028348, -11.000000117933283, -1.0000001178499922]


real	0m12.374s
user	0m41.762s
sys	0m1.948s
Loading poly4.poly... done

threads = 9: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [-11.000000078152926, -1.0000000780696474, 5.299999921922341, 16.99999992221482]


real	0m10.158s
user	0m37.893s
sys	0m1.082s
Loading poly4.poly... done

threads = 10: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [5.300000499990983, 16.99999950028348, -10.99999962361234, -0.9999996235290465]


real	0m11.260s
user	0m40.160s
sys	0m1.126s
Loading poly4.poly... done

threads = 11: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [-11.000000141730474, -1.0000001416471949, 5.299999858344794, 16.999999858637274]


real	0m10.956s
user	0m40.640s
sys	0m1.243s
Loading poly4.poly... done

threads = 12: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [5.300000499990983, 16.99999950028348, -11.00000029406469, -1.000000293981411]


real	0m11.045s
user	0m39.642s
sys	0m1.565s
Loading poly4.poly... done

threads = 13: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [-11.000000194106388, -1.0000001940231067, 5.299999805968882, 16.999999806261364]


real	0m10.668s
user	0m38.764s
sys	0m1.896s
Loading poly4.poly... done

threads = 14: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [5.300000499990983, 16.99999950028348, -11.000000487245902, -1.0000004871626185]


real	0m10.573s
user	0m39.542s
sys	0m1.483s
Loading poly4.poly... done

threads = 15: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [-10.999999899181816, -0.9999998990985337, 5.300000100893456, 17.00000010118594]


real	0m11.043s
user	0m40.746s
sys	0m1.875s
Loading poly4.poly... done

threads = 16: range -5000.0 to 5000.0, 4.0E8 slices, precision = 1.0E-6

poly4.poly: +1.00000x^4-10.3000x^3-166.500x^2+835.900x^1+991.100x^0 has 4 roots
  [5.300000499990983, 16.99999950028348, -11.00000038213092, -1.0000003820476278]


real	0m11.168s
user	0m40.752s
sys	0m2.230s



QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

Once the thread count reached 4+ threads, the time dipped to around 10-11 seconds, an almost 40% decrease compared to the runtime with a single thread. The fastest time recorded was with 9 threads at 10.158 seconds. Even when running with 1000 and 5000 threads, the time recorded never dipped below 10 seconds and actually increased slightly to around 12 seconds. My assumption as to why the runtimes never deviate too far from the 4 thread mark is due to the number of cores running the VM (currently 4) and thus was the bottleneck on how quickly the program was able to run.




QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?
System load is constant regardless of the number of threads, as seen when running the program with up to 1000 or 5000 threads. Threads do not increase CPU speed, but rather increase the CPU's efficiency in handling the program. However, creating too many threads can create a slight decrease in efficiency simply due to the program having to run more lines of code.







BONUS
=====

QUESTION 5: Time your version of ThreadedSolver as you did for the full credit version. Is this additional layer of threading faster, slower, or roughly equivalent in performance? Why?





YOUR Timing:




